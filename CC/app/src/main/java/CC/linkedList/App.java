/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package CC.linkedList;

//import CC.linkedList.LinkedList;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());


//        LinkedList<String> List1 = new LinkedList<String>();
//        LinkedList<Integer> List2 = new LinkedList<>();
//
//        List1.insert("a");
//        List1.insert("b");
//        List1.insert("a");
////        List1.insert("d");
//
//        List2.insert(6);
//        List2.insert(5);
//        List2.insert(2);
//        List2.insert(4);
//


//        List1.delete("o");
//        System.out.println(List1);
       //================================================================================
//        List2.sortList(List2);
//        System.out.println(List2);

        //================================================================================
//        List2.deleteNode(2, List2);
//        System.out.println(List2);

        //==============================================================================
//        System.out.println(List1.listReverser(List1));
        //==============================================================================
//        System.out.println("isPalindrome " + List1.isPalindrome(List1.getHead()));
        //==============================================================================
//        System.out.println(List1.isTextInList(List1,"m"));
//        System.out.println(List1.isTextInList(List1,"f"));
        //==============================================================================
//        System.out.println(List1.isPalindrome(List1));

//        List1.insertAfter(1, "g");

//        System.out.println(List1.zipList(List1,List2));

//        System.out.println(List1.include("o"));

//        System.out.println(List1.Kth(2));


//        List1.append("K");
//        System.out.println(List1);

//        List1.insertAfter("a" , "V");
//        System.out.println(List1);


//       List1.insertBefore("b" , "k");
//       System.out.println(List1);

        //=====================================Tree==================================================

        BinaryTree<Integer> binaryTree= new BinaryTree<>();
        BST<Integer> bst1= new BST<>();

        binaryTree.setRoot(new BinaryNode<>(1));
        binaryTree.getRoot().setLeftNode(new BinaryNode(2));
        binaryTree.getRoot().getLeftNode().setLeftNode(new BinaryNode(4));
        binaryTree.getRoot().getLeftNode().setRightNode(new BinaryNode(5));
        binaryTree.getRoot().getLeftNode().getRightNode().setLeftNode(new BinaryNode(6));
        binaryTree.getRoot().getLeftNode().getRightNode().setRightNode(new BinaryNode(7));
        binaryTree.getRoot().setRightNode(new BinaryNode(3));
        binaryTree.getRoot().getRightNode().setRightNode(new BinaryNode(8));

        bst1.add(5);
        bst1.add(3);
        bst1.add(6);
        bst1.add(9);
        bst1.add(4);
        bst1.add(1);
        bst1.add(8);

        System.out.println(bst1);

        System.out.println(bst1.contain(8));

        System.out.println(bst1.findMax());

        System.out.println(binaryTree.findMaxvalue());
    }
}

