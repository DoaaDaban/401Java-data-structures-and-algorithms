/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package HashTabels;

import HashTabels.binaryTree.BinaryTree;
import HashTabels.binaryTree.Node;

public class App {

    public static void main(String[] args) {

        HashTable<String, Integer> clubs = new HashTable<String, Integer>();

        clubs.add("Real Madrid",100);
        clubs.add("Barcelona", 200);
        clubs.add("Man United", 300);
        clubs.add("Alhilal", 100);

        System.out.println("The size is => " + clubs.getSize());
        System.out.println(clubs.get("Real Madrid"));
        System.out.println("Delete Barcelona => " + clubs.remove("Barcelona"));
        System.out.println("The size is => " + clubs.getSize());
        System.out.println(clubs.contains("ss"));
        System.out.println(clubs.contains("Real Madrid"));

        // <<< Code challenge 32 >>>

        HashTable<Integer,Integer> trees = new HashTable<Integer, Integer>();

        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new Node(150));
        tree1.getRoot().setLeft(new Node(100));
        tree1.getRoot().setRight(new Node(250));
        tree1.getRoot().getRight().setLeft(new Node(200));
        tree1.getRoot().getRight().setRight(new Node(350));
        tree1.getRoot().getRight().getRight().setLeft(new Node(300));
        tree1.getRoot().getRight().getRight().setRight(new Node(500));
        tree1.getRoot().getLeft().setLeft(new Node(75));
        tree1.getRoot().getLeft().setRight(new Node(160));
        tree1.getRoot().getLeft().getRight().setLeft(new Node(125));
        tree1.getRoot().getLeft().getRight().setRight(new Node(175));

        tree2.setRoot(new Node(42));
        tree2.getRoot().setLeft(new Node(100));
        tree2.getRoot().setRight(new Node(600));
        tree2.getRoot().getRight().setLeft(new Node(200));
        tree2.getRoot().getRight().setRight(new Node(350));
        tree2.getRoot().getRight().getRight().setLeft(new Node(4));
        tree2.getRoot().getRight().getRight().setRight(new Node(500));
        tree2.getRoot().getLeft().setLeft(new Node(15));
        tree2.getRoot().getLeft().setRight(new Node(160));
        tree2.getRoot().getLeft().getRight().setLeft(new Node(125));
        tree2.getRoot().getLeft().getRight().setRight(new Node(175));

        System.out.println(trees.treeIntersection(tree1,tree2));

    }

    }

