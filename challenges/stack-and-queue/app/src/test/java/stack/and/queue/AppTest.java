/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test void pushToStackTest(){
        Stack stackTest = new Stack();
        stackTest.push("D");
        stackTest.push("O");
        assertNotEquals("D", stackTest.toString());
    }

    @Test
    public void popStackTest(){
        Stack stackTest = new Stack();
        stackTest.push("D");
        stackTest.push("O");
        stackTest.push("A");

        stackTest.pop();

        assertNotEquals("A", stackTest.toString());
    }

    @Test
    public void emptyStackTest() throws IllegalArgumentException {
        Stack stackTest = new Stack();
        stackTest.push("D");
        stackTest.push("O");
        stackTest.push("A");
        stackTest.pop();
        stackTest.pop();
        stackTest.pop();

        assertNotEquals("Stack { Null }",stackTest.toString());
        assertTrue(stackTest.isEmpty());
  //      assertEquals(IllegalArgumentException.class,stackTest.pop());
//      assertNull(stackTest.peek());
    }

    @Test
    public void peekStackTest(){
        Stack stackTest = new Stack();
        stackTest.push("D");
        stackTest.push("O");
        stackTest.push("A");

        assertEquals("A",stackTest.peek());
        stackTest.pop();
        assertEquals("O",stackTest.peek());
    }

    @Test
    public void enqueueToQueueTest(){
        Queue queueTest = new Queue();
        queueTest.enqueue("D");
        queueTest.enqueue("O");
        queueTest.enqueue("A");
        assertEquals("Queue{front=Node{data='D', next=Node{data='O', next=Node{data='A', next=null}}}, rear=Node{data='A', next=null}}",queueTest.toString());
    }

    @Test
    public void dequeueFromQueueTest(){
        Queue queueTest = new Queue();
        queueTest.enqueue("D");
        queueTest.enqueue("O");
        queueTest.enqueue("A");

        queueTest.dequeue();
        assertEquals("Queue{front=Node{data='O', next=Node{data='A', next=null}}, rear=Node{data='A', next=null}}",queueTest.toString());
    }

    // (expected = IllegalArgumentException.class)

    @Test
    public void emptyQueueTest(){
        Queue queueTest = new Queue();
        queueTest.enqueue("D");
        queueTest.enqueue("O");
        queueTest.enqueue("A");

        queueTest.dequeue();
        queueTest.dequeue();
        queueTest.dequeue();
        assertTrue(queueTest.isEmpty());
        assertEquals("Queue{front=null, rear=Node{data='A', next=null}}",queueTest.toString());
        assertEquals( "empty",queueTest.dequeue());
      //  assertNull(queueTest.peek());
    }

    @Test
    public void peekQueueTest(){
        Queue queueTest = new Queue();
        queueTest.enqueue("D");
        queueTest.enqueue("O");
        queueTest.enqueue("A");

        assertEquals( java.util.Optional.of("D"), java.util.Optional.ofNullable(queueTest.peek()));
        queueTest.dequeue();
        assertEquals(java.util.Optional.of("O"),java.util.Optional.ofNullable(queueTest.peek()));
    }

}
