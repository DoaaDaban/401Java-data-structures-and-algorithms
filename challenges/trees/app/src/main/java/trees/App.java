/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) throws Exception {
        System.out.println(new App().getGreeting());

        BinarySearchTree<Integer> binarySearchTree = new BinarySearchTree<Integer>();

        binarySearchTree.Add(2);
        binarySearchTree.Add(7);
        binarySearchTree.Add(5);
        binarySearchTree.Add(6);
        binarySearchTree.Add(11);
        binarySearchTree.Add(4);
        binarySearchTree.Add(9);

        BinarySearchTree<Integer> breadthTree = new BinarySearchTree();

        breadthTree.Add(20);
        breadthTree.Add(70);
        breadthTree.Add(40);
        breadthTree.Add(60);
        breadthTree.Add(50);


        System.out.println(breadthTree.breadthFirst(breadthTree));

        System.out.println(binarySearchTree.FindMax());


//        BinarySearchTree<String> Doaa= new BinarySearchTree<>();
//        Doaa.Add("D");
//        Doaa.Add("O");
//        Doaa.Add("A");
//        Doaa.Add("A");
//        Doaa.Add("C");

        System.out.println("Inorder traversal of numbers " + binarySearchTree.inorderTraversal());

        System.out.println(" ");

        System.out.println("pre traversal of numbers " + binarySearchTree.preorderTraversal());

        System.out.println(" ");

        System.out.println("post traversal of numbers " +  binarySearchTree.postorderTraversal());

        System.out.println(binarySearchTree.Contains(5));

     // ========================================

        BinarySearchTree<Integer> sumbinarySearchTree = new BinarySearchTree<Integer>();

        sumbinarySearchTree.Add(1);
        sumbinarySearchTree.Add(3);
        sumbinarySearchTree.Add(6);
        sumbinarySearchTree.Add(10);
        sumbinarySearchTree.Add(4);
        sumbinarySearchTree.Add(7);
        sumbinarySearchTree.Add(8);
        sumbinarySearchTree.Add(13);
        sumbinarySearchTree.Add(14);

        System.out.println(sumbinarySearchTree.sumOddValues(sumbinarySearchTree));

    }
}
