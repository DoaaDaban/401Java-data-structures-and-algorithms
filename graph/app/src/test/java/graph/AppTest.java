/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void addVertex(){

        Graph graph = new Graph();

        graph.addVertex("Motasim");
        graph.addVertex("Amara");

        assertNotNull(graph.getVertices());
        assertEquals(2,graph.size());
    }

    @Test
    public void addEdge(){

        Graph graph = new Graph();

        graph.addVertex("Motasim");
        graph.addVertex("Mariam");
        graph.addEdge("Motasim", "Mariam");

        assertEquals("Vertex{label='Mariam'}[Vertex{label='Motasim'}]Vertex{label='Motasim'}[Vertex{label='Mariam'}]", graph.printGraph());
    }

    @Test
    public void vertexNeighbors(){

        Graph graph = new Graph();

        graph.addVertex("Motasim");
        graph.addVertex("Mariam");
        graph.addVertex("Alaa");
        graph.addVertex("Amara");
        graph.addEdge("Motasim", "Alaa");
        graph.addEdge("Motasim", "Mariam");
        graph.addEdge("Amara", "Mariam");

        assertEquals("[Vertex{label='Alaa'}, Vertex{label='Mariam'}]",graph.getNeighbors("Motasim").toString());
        assertEquals("[Vertex{label='Mariam'}]", graph.getNeighbors("Amara").toString());

    }

    @Test
    public void emptyGraph(){

        Graph graph = new Graph();
        assertEquals(0,graph.size());
        assertEquals("[]", graph.getVertices().toString());
    }

    @Test
    public void removeVertex(){

        Graph graph = new Graph();

        graph.addVertex("Motasim");
        graph.addVertex("Amara");
        graph.addEdge("Motasim", "Amara");
        assertEquals("Vertex{label='Amara'}[Vertex{label='Motasim'}]Vertex{label='Motasim'}[Vertex{label='Amara'}]",graph.printGraph());
        assertEquals(2, graph.size());

        graph.removeVertex("Motasim");
        assertEquals("Vertex{label='Amara'}[]",graph.printGraph());
        assertEquals(1, graph.size());
    }

    @Test
    public void removeEdge(){
        Graph graph = new Graph();

        graph.addVertex("Motasim");
        graph.addVertex("Amara");
        graph.addEdge("Motasim", "Amara");
        assertEquals("Vertex{label='Amara'}[Vertex{label='Motasim'}]Vertex{label='Motasim'}[Vertex{label='Amara'}]",graph.printGraph());

        graph.removeEdge("Amara", "Motasim");
        assertEquals("Vertex{label='Amara'}[]Vertex{label='Motasim'}[]", graph.printGraph());
    }

    @Test
    public void oneVertexAndOneEdge(){
        Graph graph = new Graph();

        graph.addVertex("Motasim");
        graph.removeEdge("Motasim","Motasim");

        assertEquals("Vertex{label='Motasim'}[]",graph.printGraph());
    }
}
