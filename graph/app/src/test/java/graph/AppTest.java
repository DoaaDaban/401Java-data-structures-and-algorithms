/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    public void addVertex(){

        Graph graph = new Graph();

        graph.addVertex("doaa");
        graph.addVertex("Amara");

        assertNotNull(graph.getVertices());
        assertEquals(2,graph.size());
    }

//    @Test
//    public void addEdge(){
//
//        Graph graph = new Graph();
//
//        graph.addVertex("doaa");
//        graph.addVertex("Mariam");
//        graph.addEdge("doaa", "Mariam");
//
//        assertEquals("Vertex{label='Mariam'}[Vertex{label='doaa'}]Vertex{label='doaa'}[Vertex{label='Mariam'}]", graph.printGraph());
//    }

    @Test
    public void vertexNeighbors(){

        Graph graph = new Graph();

        graph.addVertex("doaa");
        graph.addVertex("Mariam");
        graph.addVertex("Alaa");
        graph.addVertex("Amara");
        graph.addEdge("doaa", "Alaa");
        graph.addEdge("doaa", "Mariam");
        graph.addEdge("Amara", "Mariam");

        assertEquals("[Vertex{label='Alaa'}, Vertex{label='Mariam'}]",graph.getNeighbors("doaa").toString());
        assertEquals("[Vertex{label='Mariam'}]", graph.getNeighbors("Amara").toString());

    }

    @Test
    public void emptyGraph(){

        Graph graph = new Graph();
        assertEquals(0,graph.size());
        assertEquals("[]", graph.getVertices().toString());
    }



    @Test
    public void oneVertexAndOneEdge(){
        Graph graph = new Graph();

        graph.addVertex("doaa");

        assertEquals("Vertex{label='doaa'}[]",graph.printGraph());
    }

    //    <<<Code Challenge 36 >>
    @Test
    public void breadthFirst(){

        Graph graph1 = new Graph();

        graph1.addVertex("Pandora");
        graph1.addVertex("Arendelle");
        graph1.addVertex("Metroville");
        graph1.addVertex("Monstroplolis");
        graph1.addVertex("Narnia");
        graph1.addVertex("Naboo");

        graph1.addEdge("Pandora", "Arendelle");
        graph1.addEdge("Arendelle", "Metroville");
        graph1.addEdge("Arendelle", "Monstroplolis");
        graph1.addEdge("Metroville", "Narnia");
        graph1.addEdge("Metroville", "Naboo");
        graph1.addEdge("Metroville", "Monstroplolis");
        graph1.addEdge("Monstroplolis", "Naboo");
        graph1.addEdge("Narnia", "Naboo");

        assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]", graph1.breadthTraverse("Pandora").toString());
    }


//    <<< Code Challenge 37 >>>

    @Test
    public void businessTripTest(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Arendelle");
        assertEquals(150, graph2.businessTrip(graph2, cities1));

        List<String> cities2 = new ArrayList<>();
        cities2.add("Pandora");
        cities2.add("Arendelle");
        cities2.add("Monstroplolis");
        assertEquals(192, graph2.businessTrip(graph2, cities2));

    }

    @Test
    public void businessTripNoEdge(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);

        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Monstroplolis");
        assertEquals(0, graph2.businessTrip(graph2, cities1));
    }

    @Test
    public void businessTripAtLeastOnoEdge(){

        Graph graph2 = new Graph();

        graph2.addVertex("Pandora");
        graph2.addVertex("Arendelle");
        graph2.addVertex("Metroville");
        graph2.addVertex("Monstroplolis");
        graph2.addVertex("Naboo");

        graph2.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph2.addEdgeWithWeight("Arendelle", "Metroville",99);
        graph2.addEdgeWithWeight("Arendelle", "Monstroplolis",42);
        graph2.addEdgeWithWeight("Naboo", "Monstroplolis",42);


        List<String> cities1 = new ArrayList<>();
        cities1.add("Pandora");
        cities1.add("Naboo");
        cities1.add("Monstroplolis");
        assertEquals(42, graph2.businessTrip(graph2, cities1));
    }

}
